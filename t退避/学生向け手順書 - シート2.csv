,,
,,
,,
,,
,1. 🔧 提出物の仕様,
,項目,内容
,ファイル拡張子,.py
,必須関数,"必須関数 get_move(
    board: list[list[list[int]]],
    player: int,
    last_move: tuple[int, int, int]
) -> tuple[int, int]
"
,戻り値,"(x, y) のタプル（0〜3 の範囲）"
,利用可能ライブラリ,Python標準ライブラリのみ（）
,禁止ライブラリ,"os, sys, subprocess, socket, requests, urllib, http, asyncio, threading, multiprocessing, など"
,禁止関数,"open, eval, exec, compile, __import__, system, popen"
,Pythonバージョン,サーバは Python 3.9 互換 で実行（match文など3.10以降専用構文は不可）
,実行制限,メモリ最大 約1GB、CPU時間 約3秒、1手あたり待ち時間上限 30秒
,失敗時の扱い,タイムアウト／異常終了／無効座標 → 左上から置けるマスに強制配置し、理由が記録されます
,✔️ サンプル実装,
,,
,"from typing import List, Tuple
#from local_driver import Alg3D, Board # ローカル検証用
from framework import Alg3D, Board # 本番用

class MyAI(Alg3D):
    def get_move(
        self,
        board: List[List[List[int]]], # 盤面情報
        player: int, # 先手(黒):1 後手(白):2
        last_move: Tuple[int, int, int] # 直前に置かれた場所(x, y, z)
    ) -> Tuple[int, int]:
        # ここにアルゴリズムを書く",
,,
,2. ロジック作成（GitHub 経由）,
,,
,1. 指定のリポジトリを フォーク（Fork） して、自分のアカウントにコピーしてください。,
,https://github.com/zen-integration/algorithm_code,
,,
,2. フォーク後、自分のGitHubアカウントにできたリポジトリを ローカルにクローンします。,
,,
,Windows の場合（Cドライブ直下の work フォルダに配置）：,
,cd C:\work,
,git clone https://github.com/自分のユーザー名/algorithm_code.git,
,cd algorithm_code,
,,
,Mac の場合（ホーム直下の work フォルダに配置）：,
,cd ~/work,
,git clone https://github.com/自分のユーザー名/algorithm_code.git,
,cd algorithm_code,
,,
,⚠️ 「自分のユーザー名」の部分は、GitHub のアカウント名に置き換えてください。,
,,
,3. ローカルで main.py を編集・検証します。,
,"→ python local_driver.py で動作確認できます。動作確認はこちら→
https://docs.google.com/spreadsheets/d/1Kt0yIYgVLqXbBdajk6DdbI6zymuj3fJQE-LRdwTZRMA/edit?usp=sharing",
,,
,4. できあがったら git push して GitHub に反映してください。,
,,
,3. 🧪 事前確認方法,
,,
,"フォークして作られた 自分のGitHubアカウントのリポジトリを開きます。

「Code」ボタンを押して、HTTPSのURL をコピーしてください。
（例: https://github.com/自分のユーザー名/algorithm_code.git）",
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,サーバのメニューバーを開きこのURLを貼り付けてチーム登録します。,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,,
,4. 🎮 本番ルール（イベント中）,
,,
,試合形式: 2試合制（先攻・後攻を入れ替え）,
,,
,先攻/後攻: じゃんけんで決定（勝った方が最初の先行・後攻を選べる）,
,,
,勝敗判定:,
,,
,試合勝利数が多い方が勝ち,
,同数なら「勝利までの手数」が短い方が勝ち,
,それも同数なら試合勝利の思考時間が短い方が勝ち,
,,
,制限時間: 1手あたり 10秒（超過すると左上から順に石が置かれる）,
,,
,結果表示: 勝敗・手数・理由がリアルタイムに画面表示,
,,
,5. 💬 質問・サポート,
,,
,提出や仕様に関する質問は 運営まで。,